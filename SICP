ITERATİON FACTORIAL
--------------------
(define (factorial n)

  (fact-iter 1 1 n))

  (define (fact-iter product counter max-count)

  (if ( > counter max-count)
      product
      (fact-iter ( * product counter) (+ 1 counter) max-count)))
----------------------------------------------------------------


RECURSİVE FACTORİAL
--------------------
(define (factorial n) 
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
-----------------------------------


FERMAT TEST
-----------

(define (square x) (* x x))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
          (square (expmod base (/ exp 2) m))
          m))
        (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))
---------------------------------------------------------

SQUARE ROOT
-----------
(define (sqrt-iter guess x)
(if (good-enough? guess x)
       guess
       (sqrt-iter (improve guess x)x)))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.000000001))

(define (square x) (* x x))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2 ))

(define (karekok x)
  (sqrt-iter 1.0 x))
----------------------------------------------------

CUBIC ROOT
----------
#lang racket
(define (cbrt-iter guess x)
(if (good-enough? guess x)
       guess
       (cbrt-iter (improve guess x)x)))

(define (good-enough? guess x)
  (< (abs (- (cube guess) x)) 0.000000001))

(define (cube x) (* x x x))

(define (improve guess x)
  (/ (+ (/ x (square guess) ) (* 2 guess) ) 3 ))

(define (square x) ( * x x))

(define (kupkok x)
  (cbrt-iter 1.0 x))
--------------------------------------------------------


MAKE RATIONAL
--------------
#lang sicp
(define (make-rat n d)
(let ((g  ((if (< d 0) - +)(gcd n d))))
(cons (/ n g) (/ d g))))
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define (rat n d) (print-rat (make-rat n d)))
-------------------------------------------------



IsPrime?
--------
(define (runtime)
  (current-milliseconds))

(define (smallest-divisor n) (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))

(define (next x)
  (cond ((= x 2)(+ 1 x))
         (else (+ 2 x)))) 

(define (divides? a b) (= (remainder b a) 0))

(define (square x) (* x x))

(define (prime? n)
  (= n (smallest-divisor n)))




(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
------------------------------------------------------------------
         




